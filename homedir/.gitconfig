[user]
  name = doug schlenker
  email = dougschlenker@gmail.com
[github]
  # https://github.com/blog/180-local-github-config
  user = schlenks

[alias]
  # most commonly used
  # Shorthand for checkout
  co = checkout

  # Checkout a branch. Create it if it doesn't exist
  # See`git help checkout`
  chb = checkout -B

  # Shorthand for clone
  cl = clone

  d = diff --color-words
  cam = commit -a -m
  upm = !git fetch upstream && git merge upstream/master

  # Shorthand for add
  a = add

  # Add all unstaged (including untracked) files.
  # See`git help add`
  aa = add --all

  # Interactive add. Used for patching.
  # See`git help add`
  ai = add --interactive

  # List Git aliases with definitions
  aliases = ! git config --get-regexp ^alias\\. | grep -v "^alias\\.aliases" | sed -e 's/^alias\\.//' -e 's/\\ /\\ =\\ /'

  # Amend the currently staged files to the last commit
  # See`git help commit`
  amend = commit --amend --reuse-message=HEAD

  # Shorthand for branch
  b = branch

  # Delete a branch only if it is merged in the current branch.
  # See`git help branch`
  bd = branch --delete

  # Shorthand for branch --merged
  bm = branch --merged

  # Shorthand for browse
  # See`hub help browse`
  br = browse

  # Shorthand for commit
  c = commit

  # Shorthand for checkout
  ch = checkout

  # Checkout a branch. Create it if it doesn't exist
  # See`git help checkout`
  chb = checkout -B

  # Shorthand for clone
  cl = clone

  # Delete all untracked files and directories.
  # See`git help clean`
  cleanit = clean -fd

  # Shorthand for config
  # See`git help config` for config options
  cn = config

  # Shorthand for global config
  cng = config --global

  # List contributors with number of commits
  # See`git help shortlog`
  contributors = shortlog --summary --numbered

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" --reuse-message=HEAD; }; f"

  # Show the diff between the latest commit and the current state
  d = diff

  # Diff staging area (a.k.a index) to HEAD (a.k.a last commit)
  dc = diff --cached

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Diff working tree to HEAD (a.k.a last commit).
  # Using difftool.tool for visualising diffs.
  # Do not prompt for each file. Use --prompt to override.
  dt = difftool --no-prompt

  # Diff staging area (a.k.a index) to HEAD (a.k.a last commit).
  # Using difftool.tool for visualising diffs.
  # Do not prompt for each file. Use --prompt to override.
  dtc = difftool --cached --no-prompt

  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Shorthand for fetch
  f = fetch

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git l --date=short -S$1; }; f"

  # In case of fire
  # https://twitter.com/bozhobg/status/650265599671693312
  fire = "!git commit --all && git push --set-upstream origin HEAD && echo 'LEAVE BUILDING!!!'"

  # Find commits by commit message
  fm = "!f() { git l --date=short --grep=$1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Shorthand for help
  h = help

  # Pretty log of commits. Supports options of git log
  # The 8-char abbreviation works well with the default pretty format below
  l = log --abbrev-commit --abbrev=8

  # Reverse log
  lr = log --abbrev-commit --abbrev=8 --reverse

  # Same as l, but with graph.
  # Recursive resolving of aliases break tab-completion for options,
  # so the command is listed again.
  lg = log --abbrev-commit --abbrev=8 --graph

  # Same as above, but list local commits not on upstream
  local = log --abbrev-commit --abbrev=8 @{u}..

  # Shorthand for merge
  m = merge

  # Shorthand for mergetool
  mt = mergetool

  # Log commits authored by me
  mylog = !git log --author=\"$(git config user.name)\"

  # Show the not merged branches compared to the current branch
  nm = branch --no-merged

  # Show the not merged branches compared to the master branch
  nmm = branch --no-merged master

  # Shorthand for push
  p = push

  # Shorthand for pull
  pl = pull --ff-only

  # Create a new remote branch with the same name and track it.
  # First argument is remote name. Defaults to "origin".
  # Second, third and fourth argument are passed to `git push`.
  publish = "!p() { [ -z \"$1\" ] && remote=\"origin\" || remote=$1; git push --set-upstream $2 $3 $4 $remote HEAD; }; p"

  # Push force with a check if all the commits you are overriding on the remote
  # were previously present in the remote reference in your repository.
  # This way force push is safer as it wouldn't overwrite commits by other team members
  # pushed to the remote branch after you've last pulled and rewritten some history.
  pushf = push --force-with-lease

  # Shorthand for remote
  r = remote

  report = log --abbrev-commit --abbrev=8 --since=1.week.ago --first-parent --reverse

  # Interactive rebase with the given number of latest commits
  ri = "!r() { git rebase --interactive HEAD~$1; }; r"

  # Update all remotes
  ru = remote update

  # Shorthand for rebase
  rb = rebase

  # Shorthand for reset
  rs = reset

  # View the current working tree status using the short format
  # Show the current branch as well
  # See`git help status`
  s = status --short --branch

  # Shorthand for show
  sh = show

  # Shorthand for shortlog
  shl = shortlog

  # Shorthand for stash
  st = stash

  standup = log --all --no-merges --graph --date=relative --committer=$(git config --get user.email) --pretty=format:'%C(cyan) %ad %C(yellow)%h %Creset %s %Cgreen%d' --since="$(if [[ "Mon" == "$(date +%a)" ]]; then echo "last friday"; else echo "yesterday"; fi)"

  # Pull with rebase and push with configured upstream branch
  sync = "!git pull --rebase && git push"

  # Shorthand for tag
  t = tag

  # Delete all untracked files and directories.
  # See`git help clean`
  cleanit = clean -fd

  br = branch -a
  s = status -s -u
  cl = log --stat -C -2
  dh = diff HEAD
  dc = diff --staged
  dw = diff --word-diff
  dcw = diff --color-words
  dm = !git diff | subl
  dv = !git diff | vim
  who = shortlog -s --
  ph = push
  pl = pull
  lp = log -p
  lod = log --oneline --decorate
  lg = log --graph
  lpo = log --pretty=oneline --abbrev-commit --graph --decorate --all
  l1 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  l2 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  spull = !git-svn fetch && git-svn rebase
  spush = !git-svn dcommit
  sync = !git pull && git push
  es = !git pull --rebase && git push
  lf = log --pretty=fuller
  ignorechanges = update-index --assume-unchanged
  noticechanges = update-index --no-assume-unchanged
  gc-ap = gc --aggressive --prune
  listconf = config --global --list
  lsm = log -M --stat
  hse = log --stat -5
  diffall = diff HEAD
  logr = log -M
  logr2 = log --stat -M -2
  logit = log --stat -M
  scrub = !git reset --hard && git clean -fd
  pub = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
  cs = status
  rv = remote -v
  lwr = log --stat -C
  pur = pull --rebase
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  orphank = !gitk --all `git reflog | cut -c1-7`&
  orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
  k = !exec gitk --all&
  testecho1 = !sh -c 'echo with slash: zero=$0 one=$1 two=$2' -
  # te1 RESULT: with slash: zero=- one=A two=B
  testecho2 = !sh -c 'echo without slash: zero=$0 one=$1 two=$2'
  # te2 RESULT: without slash: zero=A one=B two=C
  st = status
  l = log --stat -C
  ll = log --stat -C -3
  servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
  purgeme = !git clean -fd && git reset --hard
  prunenow = gc --prune=now
  ri = rebase --interactive --autosquash
  lol = log --pretty=oneline --graph --abbrev-commit --all
  blg = log --graph --decorate --all --abbrev-commit --pretty=oneline
  slog = log --graph --simplify-by-decoration --all --abbrev-commit --pretty=oneline
  lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
  ro = !git fetch origin && git reset --hard origin/master
  shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
  pushnotes = !sh -c 'git push $1 refs/notes/*' -
  fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
  showignored = clean -ndX
  showignored2 = ls-files --others --ignored --exclude-standard
  showuntracked = ls-files --others --exclude-standard
  rmmissing = !git rm $(git ls-files --deleted)
  mergekeepoursonly = merge -s ours
  redocommit = reset --soft HEAD^
  listunstaged = diff --name-status
  liststaged = diff --name-status --staged
  listhistory = log --name-status
  logn = log --oneline --name-only
  busypeople = shortlog -6
  busythisweek = shortlog --since=one.week.ago
  configpushtracking = config push.default tracking
  configpushnothing = config push.default nothing
  configpushmatching = config push.default matching
  configpushcurrent = config push.default current

  nr = "!sh -c 'git init $0'"
  echoparam1 = "!sh -c 'echo $0'"
  #testshfunction = "!function gitme() { git init $1; cd $1; }; gitme"

  fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  ccfq = "!sh -c 'git add $1 && git commit -m\"Placeholder\"' -"
  cob = checkout -b
  sno = show --name-only
  logsimple = log --graph --abbrev-commit --pretty=oneline --all --decorate

[apply]
  whitespace = nowarn

[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
  ui = auto
  # diff = auto
  # status = auto
  # branch = auto

[color "branch"]
    # Highlight current. Yellow local branches; Green remotes.
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    # Yellow meta; Magenta line info; Red for deleltions; Green for additions.
    meta = yellow
    frag = magenta
    old = red
    new = green
    whitespace = red reverse

[color "status"]
    # Changed files are yellow.
    # Staged files are green.
    # New (untracked) files are cyan.
    # Headers are gray (white dimmed)
    # Branch is always green even in headers
    added = green
    branch = green
    changed = yellow
    header = white dim
    untracked = cyan

[advice]
  statusHints = false

[gui]
  fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[core]
 # Global `.gitattributes`
  attributesfile = ~/.gitattributes

  #`.gitignore`
  excludesfile = ~/.gitignore

  quotepath = false
  # line endings
  # force LF during add
  autocrlf = input
  # autocrlf = true # for windows to convert to CRLF on checkout and LF on add
  # warn but allow line ending conversion to proceed
  safecrlf = warn
  # prevent crlf (then you will have to deal with the problem -- dos2unix, etc)
  #safecrlf = true

  # Default editor for commit messages and other inputs
  # Even when EDITOR is set to something else
  editor=vim

  # Make `git rebase` safer on OS X
  # More info: http://www.git-tower.com/blog/make-git-rebase-safe-on-osx
  trustctime = false

  # Treat
  #  - spaces before tabs,
  #  - lines that are indented with tabs,
  #  - all kinds of trailing whitespace
  # as an error.
  whitespace = space-before-tab,trailing-space,tab-in-indent

[rerere]
  #Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on
  enabled = 1

[difftool]
  # Difftool will not prompt for every file.
  # Use --prompt to override.
  prompt = false

[diff]
  tool = vimdiff

[diff "asciidiff"]
  textconv = ~/bin/img-ascii-diff

[diff "javascript"]
  xfuncname = "^\\s*(.*?\\bfunction\\b.*?\\(.*?\\))"

[diff-so-fancy]
  # Configure diff-so-fancy with ASCII separators
  useUnicodeRuler = false+

[format]
  pretty = colourful

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[interactive]
    diffFilter = diff-so-fancy | less --tabs=4 --RAW-CONTROL-CHARS --quit-if-one-screen --no-init --tilde --status-column --HILITE-UNREAD

[log]
    # Always use .mailmap resolution of author names and emails in git-log
    #mailmap = 1

#[mailmap]
#  file = ~/.mailmap

[init]
  templatedir = ~/.dotfiles/.git_template

[mergetool]
  # No *.orig files left when using mergetool.
  keepBackup = false

  # Mergetool will not prompt for every file.
  # Use --prompt to override.
  prompt = false

[mergetool.fac]
    cmd = fac

[merge]
  tool = vimdiff
  # Always show a diffstat at the end of a merge
  stat = true
  conflictstyle = diff3

[pager]
  # Use colors when paging regardless of default color setting.
  color = true

  diff = diff-so-fancy | less --tabs=4 --RAW-CONTROL-CHARS --quit-if-one-screen --no-init --tilde --status-column --HILITE-UNREAD
  show = diff-so-fancy | less --tabs=4 --RAW-CONTROL-CHARS --quit-if-one-screen --no-init --tilde --status-column --HILITE-UNREAD

[pretty]
  colourful = "format:%Cred%<(8)%h%Creset %<(75,trunc)%s %Cgreen%<(11)%cr%Creset%Cblue%<(17)% aN%Creset%C(yellow)% D%Creset %gN"
    live = "format:%Cred%<(6)%h%Creset %<(50,trunc)%s%C(yellow)% D%Creset %gN"

[branch]
    # Automatically set up pull to be --rebase
    # autosetuprebase = always

[credential]
    # cache creds (git help credential-cache)
  helper = cache

[filter "tabspace"]
  clean = expand -t 4

[push]
  default = matching
	followTags = true

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
  required = true
	process = git-lfs filter-process

[rebase]
  # Use --autosquash by default. It's not like one would write !fixup message by accident.
  autoSquash = true

  # Use --autostash when running git pull --rebase and when rebasing interactively
  autoStash = true

  # Warn about removed commits in interactive mode
  missingCommitsCheck = warn

[rerere]
  # Reuse recorded resolutions
  enabled = true

# URL shorthands
#
# See `git help config` and search for "url.<base>"
#
# gh: is a shorthand for git@github.com
[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

# github: is a shorthand for git://github.com/
[url "git://github.com/"]

  insteadOf = "github:"

# gst: is a shorthand for git://gist.github.com/
[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

# gist: is a shofthand for git://gist.github.com/
[url "git://gist.github.com/"]

  insteadOf = "gist:"
